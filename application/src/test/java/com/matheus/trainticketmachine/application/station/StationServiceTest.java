/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.matheus.trainticketmachine.application.station;

import com.matheus.trainticketmachine.domain.station.Station;
import com.matheus.trainticketmachine.domain.station.StationRepository;
import com.matheus.trainticketmachine.domain.station.StationService;
import com.matheus.trainticketmachine.domain.station.StationSuggestion;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.platform.runner.JUnitPlatform;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@RunWith(JUnitPlatform.class)
public class StationServiceTest {
    @Mock
    private StationRepository stationRepository;

    @InjectMocks
    private StationService stationService = new StationServiceImp();

    @Test
    @DisplayName("Should return an empty characters list when searched for station's whole name")
    public void searchForWholeStationName() {
        String searchTerm = "Santa Iria";
        List<Station> stations = List.of(new Station(searchTerm));

        StationSuggestion expected = new StationSuggestion(
                stations,
                Collections.emptySet()
        );

        when(stationRepository.filterByName(anyString())).thenReturn(stations);
        StationSuggestion result = stationService.search(searchTerm);

        verify(stationRepository, times(1)).filterByName(anyString());
        assertEquals(expected, result);
    }

    @Test
    @DisplayName("Should return the characters list suggestions when searched for initial station's name without duplication ")
    public void searchForInitialStationName() {
        String searchTerm = "sant";
        List<Station> stations = List.of(
                new Station("Santa Iria"),
                new Station("Santa Augusta"),
                new Station("Santa Margarida"),
                new Station("Santana-Cartaxo"),
                new Station("Santarém"),
                new Station("Santo Amaro de Oeiras")
        );

        StationSuggestion expected = new StationSuggestion(
                stations,
                Set.of('a', 'o')
        );

        when(stationRepository.filterByName(anyString())).thenReturn(stations);

        StationSuggestion result = stationService.search(searchTerm);
        assertEquals(expected, result);
    }

    @Test
    @DisplayName("Should return the characters list suggestions when characters suggestions contains spaces or dash")
    public void searchForInitialStationNameWithSpacesOrDashes() {
        String searchTerm = "santa";
        List<Station> stations = List.of(
                new Station("Santa Iria"),
                new Station("Santa-Augusta"),
                new Station("Santana-Cartaxo"),
                new Station("Santo Amaro de Oeiras")
        );

        StationSuggestion expected = new StationSuggestion(
                stations,
                Set.of('-', ' ', 'n')
        );

        when(stationRepository.filterByName(anyString())).thenReturn(stations);

        StationSuggestion result = stationService.search(searchTerm);
        assertEquals(expected, result);
    }

    @Test
    @DisplayName("Should return an empty stations and characters lists when repository don't find any station")
    public void searchANonExistentStationName() {
        String searchTerm = "Caíde";
        StationSuggestion expected = new StationSuggestion(Collections.emptyList(), Collections.emptySet());

        when(stationRepository.filterByName(anyString())).thenReturn(Collections.emptyList());

        StationSuggestion result = stationService.search(searchTerm);
        assertEquals(expected, result);
    }
}
